# name: Vue.js App CI/CD Pipeline

# # Xác định sự kiện trigger cho pipeline
# on:
#   push:
#     branches:
#       - main

# jobs:
#   # Job 1: Build và push Docker image
#   build_and_push:
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3

#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v2

#       - name: Create entrypoint script
#         run: |
#           echo '#!/bin/bash' > docker-entrypoint.sh
#           echo 'sed -i "s|__VITE_APP_ROOT_API__|$VITE_APP_ROOT_API|g" /usr/share/nginx/html/config.js' >> docker-entrypoint.sh
#           echo 'sed -i "s|__VITE_APP_WEBSOCKET_URL__|$VITE_APP_WEBSOCKET_URL|g" /usr/share/nginx/html/config.js' >> docker-entrypoint.sh
#           echo 'exec nginx -g "daemon off;"' >> docker-entrypoint.sh
#           chmod +x docker-entrypoint.sh

#       - name: Login to Docker Hub
#         uses: docker/login-action@v2
#         with:
#           username: ${{ secrets.DOCKERHUB_USERNAME }}
#           password: ${{ secrets.DOCKERHUB_TOKEN }}

#       # Build và push image lên Docker Hub
#       - name: Build and push Docker image
#         uses: docker/build-push-action@v3
#         with:
#           context: .
#           build-args: |
#             VITE_APP_ROOT_API=${{ secrets.VITE_APP_ROOT_API }}
#             VITE_APP_WEBSOCKET_URL=${{ secrets.VITE_APP_WEBSOCKET_URL }}
#           push: true
#           tags: |
#             ${{ secrets.DOCKERHUB_USERNAME }}/vuejs-app:latest
#             ${{ secrets.DOCKERHUB_USERNAME }}/vuejs-app:${{ github.sha }}

#   # Job 2: Deploy
#   deploy:
#     needs: build_and_push
#     runs-on: ubuntu-latest

#     steps:
#       - name: Deploy to server
#         uses: appleboy/ssh-action@v1.0.0
#         with:
#           host: ${{ secrets.SERVER_HOST }}
#           username: ${{ secrets.SERVER_USER }}
#           key: ${{ secrets.SSH_PRIVATE_KEY }}
#           script: |
#             # Pull image mới nhất từ Docker Hub
#             docker pull ${{ secrets.DOCKERHUB_USERNAME }}/vuejs-app:${{ github.sha }}

#             # Dừng và gỡ bỏ container hiện tại (nếu có)
#             docker stop vuejs-container || true
#             docker rm vuejs-container || true

#             # Chạy container mới với image đã pull về và truyền biến môi trường
#             docker run -d -p 8080:80 \
#               -e VITE_APP_ROOT_API=${{ secrets.VITE_APP_ROOT_API }} \
#               -e VITE_APP_WEBSOCKET_URL=${{ secrets.VITE_APP_WEBSOCKET_URL }} \
#               --name vuejs-container ${{ secrets.DOCKERHUB_USERNAME }}/vuejs-app:${{ github.sha }}
            
#             # Cập nhật chứng chỉ SSL nếu chưa có
#             if [ ! -f /etc/letsencrypt/live/phhtruc.id.vn/fullchain.pem ]; then
#               sudo certbot --nginx -d phhtruc.id.vn --non-interactive --agree-tos -m admin@phhtruc.id.vn
#             else
#               sudo certbot renew --quiet
#             fi

#             # Reload Nginx sau khi cài hoặc gia hạn SSL
#             sudo systemctl reload nginx
            
#             # Xóa images cũ không được sử dụng để giải phóng không gian
#             docker system prune -af
name: Vue.js App CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build_and_push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Create entrypoint script
        run: |
          cat << 'EOF' > docker-entrypoint.sh
          #!/bin/bash
          echo "VITE_APP_ROOT_API: $VITE_APP_ROOT_API"
          echo "VITE_APP_WEBSOCKET_URL: $VITE_APP_WEBSOCKET_URL"
          
          if [ -f /usr/share/nginx/html/config.js ]; then
            echo "Replacing environment variables in config.js..."
            sed -i "s|__VITE_APP_ROOT_API__|$VITE_APP_ROOT_API|g" /usr/share/nginx/html/config.js
            sed -i "s|__VITE_APP_WEBSOCKET_URL__|$VITE_APP_WEBSOCKET_URL|g" /usr/share/nginx/html/config.js
          else
            echo "WARNING: config.js file not found!"
            ls -la /usr/share/nginx/html/
          fi
          
          echo "Starting Nginx..."
          exec nginx -g "daemon off;"
          EOF
          
          chmod +x docker-entrypoint.sh

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          build-args: |
            VITE_APP_ROOT_API=${{ secrets.VITE_APP_ROOT_API }}
            VITE_APP_WEBSOCKET_URL=${{ secrets.VITE_APP_WEBSOCKET_URL }}
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/vuejs-app:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/vuejs-app:${{ github.sha }}

  deploy:
    name: Deploy to Server
    needs: build_and_push
    runs-on: ubuntu-latest

    steps:
      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e  # Exit immediately if a command exits with a non-zero status
            echo "===== START DEPLOYMENT ====="
            
            # Check system status
            echo "Checking system status..."
            docker ps
            
            # Pull new image
            echo "Pulling new image..."
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/vuejs-app:${{ github.sha }}
            
            # Stop and remove existing container
            echo "Stopping and removing existing container..."
            docker stop vuejs-container || true
            docker rm vuejs-container || true
            
            # Run new container with environment variables
            echo "Starting new container..."
            docker run -d -p 8080:80 \
              -e VITE_APP_ROOT_API=${{ secrets.VITE_APP_ROOT_API }} \
              -e VITE_APP_WEBSOCKET_URL=${{ secrets.VITE_APP_WEBSOCKET_URL }} \
              --name vuejs-container \
              ${{ secrets.DOCKERHUB_USERNAME }}/vuejs-app:${{ github.sha }}
            
            # Verify container is running
            echo "Verifying container is running..."
            if ! docker ps | grep -q vuejs-container; then
              echo "ERROR: Container failed to start!"
              echo "Container logs:"
              docker logs vuejs-container || true
              exit 1
            fi
            
            # Configure system Nginx
            echo "Configuring system Nginx..."
            if [ ! -f /etc/nginx/sites-available/default.bak ]; then
              sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/default.bak
            fi
            
            # Create new Nginx configuration
            echo "Creating new Nginx configuration..."
            sudo bash -c 'cat > /etc/nginx/sites-available/default << "EOL"
            server {
                listen 80;
                server_name phhtruc.id.vn 68.183.189.160;
                
                location / {
                    proxy_pass http://localhost:8080;
                    proxy_http_version 1.1;
                    proxy_set_header Host \$host;
                    proxy_set_header X-Real-IP \$remote_addr;
                    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto \$scheme;
                }
                
                location /api/ {
                    proxy_pass http://localhost:8002/api/;
                    proxy_set_header Host \$host;
                    proxy_set_header X-Real-IP \$remote_addr;
                }
                
                location /ws/ {
                    proxy_pass http://localhost:8002/ws/;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade \$http_upgrade;
                    proxy_set_header Connection "upgrade";
                    proxy_set_header Host \$host;
                }
            }
            EOL'
            
            # Test and reload Nginx
            echo "Testing Nginx configuration..."
            sudo nginx -t
            echo "Reloading Nginx..."
            sudo systemctl reload nginx
            
            # Clean up old images
            echo "Cleaning up old images..."
            docker system prune -af
            
            echo "===== DEPLOYMENT COMPLETE ====="